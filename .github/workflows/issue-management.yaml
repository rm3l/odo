name: Issue Management

on:
  issues:
    types:
    - opened
    - reopened
    - labeled

env:
  ORGANIZATION: redhat-developer
  # See https://github.com/redhat-developer/odo/projects?query=is%3Aopen
  PROJECT_NUMBER: 16

jobs:
  label_issue:
    name: Label issue
    runs-on: ubuntu-latest
    permissions:
      issues: write
    steps:
    - name: Label issue
      # Action recommended in https://docs.github.com/en/actions/managing-issues-and-pull-requests/adding-labels-to-issues
      # Recommended to pin unofficial Actions to a specific commit SHA
      uses: andymckay/labeler@3a4296e9dcdf9576b0456050db78cfd34853f260
      with:
        add-labels: "needs-triage"
        repo-token: ${{ secrets.GITHUB_TOKEN }}

  manage_issue_in_project:
    name: Manage issue to Project
    runs-on: ubuntu-latest
    steps:
    - name: Add issue to Project
      uses: actions/add-to-project@v0.3.0
      with:
        project-url: https://github.com/orgs/${{ env.ORGANIZATION }}/projects/${{ env.PROJECT_NUMBER }}
        # This action needs a Personal Access Token (PAT) to be created with 'repo' and 'project' scopes and be added as repository secret.
        # See https://github.com/actions/add-to-project#creating-a-pat-and-adding-it-to-your-repository and https://github.com/settings/tokens/new
        github-token: ${{ secrets.PROJECT_MANAGEMENT_TOKEN }}

    - name: Get project data
      env:
        GITHUB_TOKEN: ${{ secrets.PROJECT_MANAGEMENT_TOKEN }}
      run: |
        gh api graphql -f query='
          query($org: String!, $number: Int!) {
            organization(login: $org){
              projectV2(number: $number) {
                id
                fields(first:20) {
                  nodes {
                    ... on ProjectV2Field {
                      id
                      name
                    }
                    ... on ProjectV2SingleSelectField {
                      id
                      name
                      options {
                        id
                        name
                      }
                    }
                  }
                }
              }
            }
          }' -f org=$ORGANIZATION -F number=$PROJECT_NUMBER > project_data.json
        
        echo 'PROJECT_ID='$(jq '.data.organization.projectV2.id' project_data.json) >> $GITHUB_ENV
        #echo 'DATE_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Date posted") | .id' project_data.json) >> $GITHUB_ENV
        #echo 'STATUS_FIELD_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .id' project_data.json) >> $GITHUB_ENV
        #echo 'TODO_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Status") | .options[] | select(.name=="Todo") |.id' project_data.json) >> $GITHUB_ENV
        echo 'PRIORITY_URGENT_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Priority") | .options[] | select(.name | startswith("Urgent")) |.id' project_data.json) >> $GITHUB_ENV
        echo 'PRIORITY_HIGH_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Priority") | .options[] | select(.name | startswith("High")) |.id' project_data.json) >> $GITHUB_ENV
        echo 'PRIORITY_MEDIUM_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Priority") | .options[] | select(.name | startswith("Medium")) |.id' project_data.json) >> $GITHUB_ENV
        echo 'PRIORITY_LOW_OPTION_ID='$(jq '.data.organization.projectV2.fields.nodes[] | select(.name== "Priority") | .options[] | select(.name | startswith("Low")) |.id' project_data.json) >> $GITHUB_ENV

    - name: Set Priority field in Project
      if: startsWith(github.event.label.name, 'priority/')


